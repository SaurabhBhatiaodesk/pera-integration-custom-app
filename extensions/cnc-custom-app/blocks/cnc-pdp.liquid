<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>cnc — Stock Check (qty-aware)</title>
<style>
  :root{--cnc-green:#10b981;--cnc-green-d:#0ea171;--cnc-red:#ef4444;--cnc-gray:#e5e7eb;--cnc-text:#0f172a;--cnc-sub:#475569}
  body{font-family:system-ui,Segoe UI,Inter,Roboto,Helvetica,Arial,sans-serif;background:#f9fafb;color:var(--cnc-text);padding:24px}
  .cnc-stockcheck{max-width:680px;border:1px solid var(--cnc-green);border-radius:16px;padding:14px;background:#fff;margin:auto}
  .cnc-header{display:flex;justify-content:center}
  .cnc-close{display:flex;align-items:center;gap:8px;font-size: 13px;border:1px solid var(--cnc-green);color:var(--cnc-green);background:#fff;border-radius:999px;padding:10px 18px;font-weight:700;cursor:pointer}
  .cnc-close:hover{background:#f6fffb}
  .cnc-close-icon{font-size: 13px;}
  .cnc-search{display:flex;gap:8px;margin:14px 8px}
  .cnc-input{flex:1;border:1px solid #d1d5db;border-radius:6px;padding:10px 12px;font-size:14px}
 .cnc-search-btn {
      display: grid;
      place-items: center;
      border: none;
      background: var(--cnc-green);
      color: #fff;
      border-radius: 6px;
      padding: 11px;
      cursor: pointer;
      width: auto;
  }
  .cnc-search input{
    padding:0 20px;
  }
  .cnc-search-btn:hover{background:var(--cnc-green-d)}
  .cnc-results{margin:4px 6px 8px}
  .cnc-item{padding:12px 8px;border-top:1px solid var(--cnc-gray)}
  .cnc-row{display:flex;align-items:center;gap:10px;cursor:pointer}
  .cnc-radio{appearance:none;-webkit-appearance:none;inline-size:18px;block-size:18px;border:2px solid #cbd5e1;border-radius:999px;display:inline-grid;place-items:center;cursor:pointer}
  .cnc-radio:checked{border-color:var(--cnc-green)}
  .cnc-radio:checked::after{content:""; inline-size:10px; block-size:10px; background:var(--cnc-green); border-radius:999px}
  .cnc-name{font-weight:700}
  .cnc-distance{margin-left:6px;color:var(--cnc-sub);font-weight:600;font-size:13px;white-space:nowrap}
  .cnc-badge{margin-left:auto;font-size:13px;font-weight:700;display:flex;align-items:center;gap:6px;text-wrap:nowrap}
  .cnc-badge.cnc-in{color:var(--cnc-green)}
  .cnc-badge.cnc-out{color:var(--cnc-red)}
  .cnc-caret{margin-left:8px;transition:transform .18s ease}
  .cnc-detail{margin-left:30px;margin-top:8px;color:#111;font-size:14px;display:none;line-height:1.45}
  .cnc-item.cnc-open .cnc-detail{display:block}
  .cnc-item.cnc-open .cnc-caret{transform:rotate(180deg)}
  .cnc-loader,.cnc-empty,.cnc-error{padding:10px 8px;font-size:14px}
  .cnc-error{color:var(--cnc-red);font-weight:700}
</style>
</head>
<body>

<!-- keep the .quantity__input class from your theme -->
<input class="quantity__input" type="number" value="1" min="1" style="margin:0 auto 16px;display:block;max-width:160px;padding:8px;border:1px solid #d1d5db;border-radius:6px" />

<div class="cnc-stockcheck" id="cnc-stockcheck">
  <div class="cnc-header">
    <button class="cnc-close" type="button" id="cnc-toggle-btn">
      <span class="cnc-close-icon">
        <svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 616 512" width="16" height="16"><path fill="currentColor" d="M602 118.6L537.1 15C531.3 5.7 521 0 510 0H106C95 0 84.7 5.7 78.9 15L14 118.6c-29.6 47.2-10 110.6 38 130.8v227.4c0 19.4 14.3 35.2 32 35.2h448c17.7 0 32-15.8 32-35.2V249.4c48-20.2 67.6-83.6 38-130.8zM516 464H100v-96h416zm-.2-144.2H100v-64.7c24-3.3 45.1-15.2 60.3-32.2 18 20.1 44.3 33.1 73.8 33.1 29.6 0 55.8-13 73.8-33.1 18 20.1 44.3 33.1 73.8 33.1 29.6 0 55.8-13 73.8-33.1 15.3 17 36.3 28.9 60.3 32.2zm47.9-133c-3.2 6.8-10.9 18.6-27 20.8-2.4.3-4.8.5-7.2.5-14.7 0-28.2-6.1-38.1-17.2L455.7 151 420 190.8c-9.9 11.1-23.5 17.2-38.1 17.2s-28.2-6.1-38.1-17.2L308 151l-35.7 39.8c-9.9 11.1-23.5 17.2-38.1 17.2-14.7 0-28.2-6.1-38.1-17.2L160.3 151l-35.7 39.8c-9.9 11.1-23.5 17.2-38.1 17.2-2.5 0-4.9-.2-7.2-.5-16-2.2-23.8-13.9-27-20.8-5-10.8-7.1-27.6 2.3-42.6L114.8 48h386.3l60.2 96.1c9.5 15.1 7.5 31.9 2.4 42.7z"></path></svg>
      </span>
      <span>Check Stock in Store</span>
    </button>
  </div>

  <div class="cnc-search" id="cnc-search-box">
    <input id="cnc-postcode" class="cnc-input" type="text" placeholder="Enter PIN / Postcode" />
    <button id="cnc-search-btn" class="cnc-search-btn" aria-label="Search">
      <svg viewBox="0 0 24 24" width="18" height="18"><path d="M15.5 14h-.79l-.28-.27a6.5 6.5 0 10-1.06 1.06l.27.28h.79l5 5 1.5-1.5-5-5zM10 15.5A5.5 5.5 0 1010 4a5.5 5.5 0 000 11.5z" fill="currentColor"/></svg>
    </button>
  </div>

  <div id="cnc-results" class="cnc-results" aria-live="polite"></div>
</div>

<script>
(function(){
  /* ===== CONFIG ===== */
  const API_BASE        = "http://pera-integration-custom-app-8fec38b7e201.herokuapp.com";
  const PICKUP_ENDPOINT = API_BASE + "/api/pickup";
  const SHOP_DOMAIN     = "{{block.settings.store_url}}";
  const VARIANT_ID      = "{{product.variants.first.id}}";

  /* ===== HELPERS ===== */
  if (!window.CSS) window.CSS = {};
  if (!CSS.escape) CSS.escape = s => String(s).replace(/([ #;?%&,.+*~':"!^$[\]()=>|\/@])/g,'\\$1');

  function safeGet(obj, path, fallback){
    try{ return path.split('.').reduce((o,k)=> (o && (k in o)) ? o[k] : undefined, obj) ?? fallback; }catch{ return fallback; }
  }
  function escapeHtml(s){
    return String(s||'').replace(/[&<>"']/g, m=>({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;'}[m]));
  }
  function address(a){
    if (!a) return '';
    const formatted = safeGet(a, 'formatted', null);
    if (Array.isArray(formatted)) return formatted.map(escapeHtml).join('<br>');
    if (typeof formatted === 'string') return escapeHtml(formatted);
    const parts = [
      a.address1, a.address2,
      [a.city,a.province].filter(Boolean).join(', '),
      [a.country,a.zip].filter(Boolean).join(' - ')
    ].filter(Boolean);
    return parts.map(escapeHtml).join('<br>');
  }

  // --- postcode helpers ---
  function extractPostcode(str){
    if (!str) return '';
    const m = String(str).match(/\b\d{4,6}\b/);   // AU 4-digit; keep 5-6 for safety
    return m ? m[0] : '';
  }
  function deriveZipFromLocation(loc){
    // 1) explicit zip field
    const zip1 = safeGet(loc, 'address.zip', '');
    if (zip1) return String(zip1);
    // 2) any formatted array or string
    const fmt  = safeGet(loc, 'address.formatted', '');
    if (Array.isArray(fmt)) {
      const z = extractPostcode(fmt.join(' '));
      if (z) return z;
    } else if (fmt) {
      const z = extractPostcode(fmt);
      if (z) return z;
    }
    // 3) try name or raw for good measure
    const z2 = extractPostcode(loc.name || safeGet(loc,'raw.name',''));
    return z2 || '';
  }

  function deriveZipFromSaved(sel){
    if (!sel) return '';
    const zip = safeGet(sel,'address.zip','') || extractPostcode((sel.address && sel.address.formatted && sel.address.formatted.join ? sel.address.formatted.join(' ') : sel.address?.formatted || ''));
    return String(zip || '');
  }

  function getRequiredQty(){
    const el = document.querySelector('.quantity__input');
    const n  = parseInt((el && el.value) || '1', 10);
    return Number.isFinite(n) && n > 0 ? n : 1;
  }
  function getAvailFromLoc(loc){
    return Number(
      safeGet(loc, 'available', null) ??
      safeGet(loc, 'availableQty', null) ??
      safeGet(loc, 'qtyAvailable', null) ??
      safeGet(loc, 'inventory', null) ??
      safeGet(loc, 'inventoryQuantity', null) ??
      0
    );
  }
  function qtyBadge(available, required){
    if (available >= required) return `<span class="cnc-badge cnc-in">✔ In stock</span>`;
    if (available > 0) return `<span class="cnc-badge cnc-out">Out of stock</span>`;
    return `<span class="cnc-badge cnc-out">Out of stock</span>`;
  }

  /* ===== DOM ===== */
  const toggleBtn     = document.getElementById('cnc-toggle-btn');
  const searchBox     = document.getElementById('cnc-search-box');
  const postcodeInput = document.getElementById('cnc-postcode');
  const searchBtn     = document.getElementById('cnc-search-btn');
  const resultsBox    = document.getElementById('cnc-results');

  /* ===== STORAGE KEYS ===== */
  const KEY_SELECTED  = 'pickup.selectedLocation';
  const KEY_LAST_POST = 'pickup.lastPostcode';

  function readLastPostcode(){
    try { return localStorage.getItem(KEY_LAST_POST) || ''; } catch { return ''; }
  }
  function setLastPostcode(code){
    try { localStorage.setItem(KEY_LAST_POST, String(code||'').trim()); } catch {}
  }

  function readSavedSelection(){
    try {
      const raw = localStorage.getItem(KEY_SELECTED);
      return raw ? JSON.parse(raw) : null;
    } catch { return null; }
  }
  let savedSelection = readSavedSelection();

  // --- persist both selectedLocation AND lastPostcode on selection ---
  function persistSelection(location) {
    try {
      const locId =
        location.gid ||
        location.id ||
        location.locationId ||
        (location.raw && (location.raw.id || location.raw.locationId)) ||
        null;

      const formattedAddress =
        (location.address && Array.isArray(location.address.formatted))
          ? location.address.formatted
          : (location.address && typeof location.address.formatted === 'string')
            ? [location.address.formatted]
            : [
                [location.address?.address1, location.address?.address2].filter(Boolean).join(', '),
                [location.address?.city, location.address?.province].filter(Boolean).join(', '),
                [location.address?.country, location.address?.zip].filter(Boolean).join(' ')
              ].filter(Boolean);

      // Try to extract postcode from the selected location
      const zip = deriveZipFromLocation(location);

      const payload = {
        id: locId,
        name: location.name || '',
        address: { formatted: formattedAddress, zip },
        distanceKm: Number(location.distanceKm || 0),
        status: location.status || (Number(location.available ?? location.availableQty ?? 0) > 0 ? 'in_stock' : 'out_of_stock'),
        available: getAvailFromLoc(location),
        raw: location
      };

      localStorage.setItem(KEY_SELECTED, JSON.stringify(payload));
      if (zip) {
        setLastPostcode(zip);                 // <-- update pickup.lastPostcode on selection, too
        if (postcodeInput && postcodeInput.value !== zip) {
          postcodeInput.value = zip;          // keep UI in sync
        }
      }
      savedSelection = payload;
    } catch (e) {
      console.warn('Failed to save selection', e);
    }
  }

  function emitSelected(location){
    persistSelection(location);
    try {
      window.dispatchEvent(new CustomEvent('cnc:pickupSelected', { detail: { location } }));
    } catch(e){ console.warn('emitSelected failed', e); }
  }

  /* ===== RENDER ===== */
  function makeRowTpl(required){
    return (loc, idx)=>{
      const available = getAvailFromLoc(loc);
      return `
        <div class="cnc-item" data-idx="${idx}" data-id="${escapeHtml(loc.locationId || loc.id || '')}">
          <div class="cnc-row" data-toggle>
            <input class="cnc-radio" type="radio" name="cnc-pickup" aria-label="Select ${escapeHtml(loc.name||'Unknown')}" />
            <div class="cnc-name">${escapeHtml(loc.name||'Unknown')}</div>
            <div class="cnc-distance">${Number(loc.distanceKm||0).toFixed(2)} km</div>
            ${qtyBadge(available, required)}
            <svg class="cnc-caret" width="16" height="16" viewBox="0 0 24 24" aria-hidden="true"><path d="M7 10l5 5 5-5z" fill="#94a3b8"/></svg>
          </div>
          <div class="cnc-detail">${address(loc.address)}</div>
        </div>
      `;
    };
  }

  function renderResults(payload, preferredId){
    const required = getRequiredQty();
    const rowTpl   = makeRowTpl(required);
    const inR  = Array.isArray(payload?.inRadius) ? payload.inRadius : [];
    const outR = Array.isArray(payload?.outOfRadius) ? payload.outOfRadius : [];
    const merged = [...inR, ...outR];

    const seen = new Set();
    let list = merged.filter(loc=>{
      const id = String(loc.locationId ?? loc.id ?? '');
      if (!id) return true;
      if (seen.has(id)) return false;
      seen.add(id);
      return true;
    });

    list.sort((a,b)=> Number(a.distanceKm||0) - Number(b.distanceKm||0));

    if(!list.length){
      resultsBox.innerHTML = `<div class="cnc-empty">No pickup locations found.</div>`;
      return;
    }

    resultsBox.innerHTML = list.map(rowTpl).join('');
    const items = Array.from(resultsBox.querySelectorAll('.cnc-item'));

    items.forEach((item, i)=>{
      const radio  = item.querySelector('.cnc-radio');
      const header = item.querySelector('[data-toggle]');
      const selectThis = ()=>{
        resultsBox.querySelectorAll('.cnc-radio').forEach(r=>r.checked=false);
        resultsBox.querySelectorAll('.cnc-item').forEach(el=>el.classList.remove('cnc-open'));
        radio.checked = true;
        item.classList.add('cnc-open');
        emitSelected(list[i]); // now also updates pickup.lastPostcode
      };
      header.addEventListener('click', e=>{ if(e.target!==radio) selectThis(); });
      radio.addEventListener('change', ()=>{ if(radio.checked) selectThis(); });
    });

    // Try to auto-select saved or preferred
    let selected = null;
    if (preferredId){
      const idSel = `.cnc-item[data-id="${CSS.escape(preferredId)}"]`;
      const matchEl = resultsBox.querySelector(idSel);
      if (matchEl){
        const r = matchEl.querySelector('.cnc-radio');
        if (r) r.checked = true;
        matchEl.classList.add('cnc-open');
        selected = list[Number(matchEl.getAttribute('data-idx'))] ??
                   list.find(l => String(l.locationId ?? l.id ?? '') === String(preferredId));
      }
    }
    if(!selected && savedSelection?.id){
      const match = list.find(l => String(l.locationId ?? l.id ?? '') === String(savedSelection.id));
      if (match){
        const idSel = `.cnc-item[data-id="${CSS.escape(savedSelection.id)}"]`;
        const el = resultsBox.querySelector(idSel);
        if (el){
          const r = el.querySelector('.cnc-radio');
          if (r) r.checked = true;
          el.classList.add('cnc-open');
          selected = match;
        }
      }
    }
    if(!selected && list.length){
      const firstItem  = resultsBox.querySelector('.cnc-item');
      const firstRadio = resultsBox.querySelector('.cnc-radio');
      if(firstItem && firstRadio){
        firstRadio.checked = true;
        firstItem.classList.add('cnc-open');
        selected = list[0];
      }
    }
    if (selected) emitSelected(selected); // persists and updates lastPostcode too
  }

  async function search(postcode, preferredId){
    const cleanPin = String(postcode||'').trim();
    if(!cleanPin){
      resultsBox.innerHTML = `<div class="cnc-error">Please enter a PIN / Postcode.</div>`;
      return;
    }
    setLastPostcode(cleanPin); // still save on search

    resultsBox.innerHTML = `<div class="cnc-loader">Checking stock…</div>`;
    try{
      const payload = {
        myShopifyDomain: SHOP_DOMAIN,
        pincode: cleanPin,
        variantId: VARIANT_ID || null,
        requiredQty: getRequiredQty()
      };

      const res = await fetch(PICKUP_ENDPOINT, {
        method:'POST',
        headers:{'Content-Type':'application/json'},
        mode:'cors',
        body: JSON.stringify(payload)
      });

      if(!res.ok){
        const text = await res.text().catch(()=> '');
        throw new Error(`Network error: ${res.status} ${text}`);
      }
      const data = await res.json();
      renderResults(data, preferredId);
    }catch(e){
      console.error('Pickup API error:', e);
      resultsBox.innerHTML = `<div class="cnc-error">Please enter a valid PIN code.</div>`;
    }
  }

  /* ===== TOGGLE ===== */
  let visible = true;
  toggleBtn.addEventListener('click', ()=>{
    visible = !visible;
    searchBox.style.display = visible ? 'flex' : 'none';
    if (!visible) resultsBox.innerHTML = '';
  });

  /* ===== BOOT ===== */
  document.addEventListener('DOMContentLoaded', async ()=>{
    searchBox.style.display = 'flex';
    resultsBox.innerHTML = '';

    const saved = readSavedSelection();
    const preferredId = safeGet(saved,'id',null) || safeGet(saved,'raw.locationId',null);
    const lastPin = readLastPostcode();
    const fallbackPin = lastPin || deriveZipFromSaved(saved);

    if (fallbackPin) {
      postcodeInput.value = fallbackPin;
      await search(fallbackPin, preferredId);
    } else {
      postcodeInput.focus();
    }
  });

  /* ===== EVENTS ===== */
  searchBtn.addEventListener('click', ()=> search(postcodeInput.value, savedSelection?.id || null));
  postcodeInput.addEventListener('keydown', e=>{ if(e.key==='Enter') search(postcodeInput.value, savedSelection?.id || null); });
  postcodeInput.addEventListener('blur', ()=> setLastPostcode(postcodeInput.value));

  const qtyEl = document.querySelector('.quantity__input');
  if (qtyEl){
    const recheck = ()=>{
      const pin = (postcodeInput && postcodeInput.value) || '';
      if (pin) search(pin, readSavedSelection()?.id || null);
    };
    qtyEl.addEventListener('change', recheck);
    qtyEl.addEventListener('input',  recheck);
  }
})();
</script>


</body>
</html>

{% schema %}
{
  "name": "cnc-pdp-qty-aware",
  "target": "section",
  "settings": [
    { "type": "product", "id": "product", "label": "Product", "autofill": true },
    { "type": "color", "id": "colour", "label": "Star Colour", "default": "#10b981" },
    { "type":"text","id":"store_url","label":"Enter the Store URL!"}
  ]
}
{% endschema %}
